<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql触发器trigger使用]]></title>
    <url>%2F2017%2F11%2F20%2Ftrigger%2F</url>
    <content type="text"><![CDATA[简介trigger 是 mysql 中的一个触发器,触发器的主要作用是在执行 mysql 之前或者之后来执行一些特定的操作. 操作规则主要针对的 mysql 操作：insert、update、delete. 触发的时间设定是： before （sql 执行前）、after（sql 执行之后）。 示例示例语句12345CREATE triggername AFTER INSERT ON tablename FOR EACH ROW BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END; SELECT OLD.id FROM tablename； END; 示例含义创建一个 名为triggername的触发器，在tablename表插入数据之后执行，查找原有的 id，作用于每一行操作。 并且忽略掉触发器的 sql 错误，也就是触发器与原sql 互不影响。 示例详解1CREATE triggername 创建一个 名为triggername的触发器。 12AFTER INSERT ON tablename 在 insert 之后 执行， 这里我们也可以用 BEFOR ，在insert之前，同时操作类型也支持 update 和 delete。也就是 AFTER|BEFORE INSERT|DELETE|UPDATE 并作用于 tablename 这张表 12BEGIN DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END; 开始一系列操作的语句，通常我们要执行一组sql 的时候 会用到 begin end 语法。 声明 trigger 和其作用到的 sql 语句互相独立。因为对于 trigger 而言 ，所要执行的 sql 语句和 trigger 相当于是在同一个事务内。也就是说 sql 执行成功则执行 trigger 。同理若 trigger 执行失败了，则原sql也不会成功执行，会进行回滚。有时候 trigger 是在业务已经完善之后要加的一些操作，为了避免影响到原有的 sql 执行，所以加了这一声明，来忽视 trigger可能遇到的的错误.若 sql 执行成功，trigger 执行不成功的时候，自动忽略trigger 内的错误。不要影响到原有 sql。DECLARE 具体写法参考：参考地址 12SELECT OLD.id FROM tablename; END; 执行要触发的语句 这里是查找出原有 sql 的 id 。如果是打印执行后的 id 则是 NEW.id。这里用 OLD 和 NEW 分别表示执行前和执行后的状态。 结束执行语句 删除 trigger1DROP TRIGGER triggername; 注意事项如果是在 sql 命令行执行的话， 注意执行语句前要先执行DELIMITER //，因为 sql语句是以 ; 分隔的。而DELIMITER主要是将复合的sql语句作为一条语句一次性执行。]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的笔记]]></title>
    <url>%2F2017%2F11%2F18%2Fnote%2F</url>
    <content type="text"><![CDATA[brew 简单操作命令 安装 vim： brew install vim查看 brew 可升级应用：brew outdated查看 brew 安装的应用版本： brew list —versionsbrew 安装的文件默认安装到/usr/local/bin/下设置 brew 安装的 vim 为默认vim:alias vim=’/usr/local/bin/vim’ Windows 查看进程详情 原问题是 想看不同的 Python.exe 运行的是具体哪个脚本。在任务管理器加一列。Command Line。 zsh 配置文件 之前在 bash_profile 中修改了环境变量 但是 总是不生效 需要每次都 source 一下因为 bash_profile 是 bash 的配置文件,修改了下 zsh 的配置文件,让 zsh 加载 bash的配置文件就好了vim ~/.zshrc加上:source ~/.bash_profile就可以了 mac 强制退出 command + Option + Esc 设置服务器免密登录 ssh-copy-id -p [port] [username]@[host]执行完此步之后会让你输入密码 输入后即可把自己的公钥上传到服务器 实现免密登录 查看端口号 列出进程 id lsof -i:8000 查询文件所在的位置 find / -name filename git 撤销提交 git reset HEAD^git push origin dev -f mongodb 导入导出数据 导入数据mongorestore -h 127.0.0.1:27017 -d 数据库名字 文件地址 导出数据mongodump -h IP -port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The first article]]></title>
    <url>%2F2017%2F11%2F16%2Ffirst%2F</url>
    <content type="text"><![CDATA[1print ("hello world") 之前搭建过一个 blog，主要是看着好看，实用性并不好。 后来在 csdn 记录，再后来就很少记录了，有一些需要记录的都记在 Notion 或者有道云笔记。 记在本地笔记的坏处是 总是记得很随意，而写博客能对细碎的知识点重新梳理一下。 工作之余，用 Hexo + NexT 搭建了这个博客，简介而又功能齐全。 很久没有写一些随笔感悟之类，社交平台的繁杂导致越來越不愿意表达自己。 以后有随笔感悟也可以写在这里，反正也没几个人看的。=_= 不会说话了，就这样吧。 希望能坚持。]]></content>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
</search>
