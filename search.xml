<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2017/11/20/test/</url>
      <content type="html"><![CDATA[<p>test</p>
]]></content>
      
        
        <tags>
            
            <tag> test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-trigger]]></title>
      <url>/2017/11/20/mysql-trigger/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>trigger 是 mysql 中的一个触发器,触发器的主要作用是在执行 mysql 之前或者之后来执行一些特定的操作.</p>
<h2 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h2><p>主要针对的 mysql 操作：insert、update、delete. \<br>触发的时间设定是： before （sql 执行前）、after（sql 执行之后）。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例语句"><a href="#示例语句" class="headerlink" title="示例语句"></a>示例语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> triggername <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tablename <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> SQLEXCEPTION <span class="keyword">BEGIN</span> <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> OLD.id <span class="keyword">FROM</span> tablename；</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<h3 id="示例含义"><a href="#示例含义" class="headerlink" title="示例含义"></a>示例含义</h3><p>创建一个 名为triggername的触发器，在tablename表插入数据之后执行，查找原有的 id，作用于每一行操作。</p>
<p>并且忽略掉触发器的 sql 错误，也就是触发器与原sql 互不影响。</p>
<h3 id="示例详解"><a href="#示例详解" class="headerlink" title="示例详解"></a>示例详解</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> triggername</span><br><span class="line"></span><br><span class="line">创建一个 名为triggername的触发器。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> tablename</span><br><span class="line"></span><br><span class="line">在 <span class="keyword">insert</span> 之后 执行， 这里我们也可以用 BEFOR ，在<span class="keyword">insert</span>之前，同时操作类型也支持 <span class="keyword">update</span> 和 <span class="keyword">delete</span>。 </span><br><span class="line">也就是 <span class="keyword">AFTER</span>|<span class="keyword">BEFORE</span> <span class="keyword">INSERT</span>|<span class="keyword">DELETE</span>|<span class="keyword">UPDATE</span></span><br><span class="line"></span><br><span class="line">并作用于 tablename 这张表</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">开始一系列操作的语句，通常我们要执行一组<span class="keyword">sql</span> 的时候 会用到 <span class="keyword">begin</span> <span class="keyword">end</span> 语法。</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> SQLEXCEPTION <span class="keyword">BEGIN</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">这句话是一个声明，声明 trigger 和其作用到的 sql 语句互相独立。</span><br><span class="line"></span><br><span class="line">因为对于 trigger 而言 ，所要执行的 sql 语句和 trigger 相当于是在同一个事务内。 </span><br><span class="line">也就是说 sql 执行成功则执行 trigger 。同理若 trigger 执行失败了，则原sql也不会成功执行，会进行回滚。 </span><br><span class="line">有时候 trigger 是在业务已经完善之后要加的一些操作，为了避免影响到原有的 sql 执行，所以加了这一声明，来忽视 trigger可能遇到的的错误. </span><br><span class="line">若 sql 执行成功，trigger 执行不成功的时候，自动忽略trigger 内的错误。不要影响到原有 sql。</span><br></pre></td></tr></table></figure>
<p>DECLARE 具体写法参考：<br><a href="&quot;https://stackoverflow.com/questions/8595679/mysql-trigger-after-update-in-both-direction?rq=1&quot;" title="参考地址">参考地址</a></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> OLD.id <span class="keyword">FROM</span> tablename;</span><br><span class="line"></span><br><span class="line">执行要触发的语句 这里是查找出原有 sql 的 id 。如果是打印执行后的 id 则是 NEW.id。这里用 OLD 和 NEW 分别表示执行前和执行后的状态。</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">结束执行语句</span><br></pre></td></tr></table></figure>
<h2 id="删除-trigger"><a href="#删除-trigger" class="headerlink" title="删除 trigger"></a>删除 trigger</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> triggername;</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果是在 sql 命令行执行的话， 注意执行语句前要先执行DELIMITER //，因为 sql语句是以 ; 分隔的。而DELIMITER主要是将复合的sql语句作为一条语句一次性执行。</p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的笔记]]></title>
      <url>/2017/11/18/note/</url>
      <content type="html"><![CDATA[<h3 id="brew-简单操作命令"><a href="#brew-简单操作命令" class="headerlink" title="brew 简单操作命令"></a>brew 简单操作命令</h3><blockquote>
<p>安装 vim：  brew install vim<br>查看 brew 可升级应用：brew outdated<br>查看 brew 安装的应用版本： brew list —versions<br>brew 安装的文件默认安装到/usr/local/bin/下<br>设置 brew 安装的 vim 为默认vim:<br>alias vim=’/usr/local/bin/vim’</p>
</blockquote>
<hr>
<h3 id="Windows-查看进程详情"><a href="#Windows-查看进程详情" class="headerlink" title="Windows 查看进程详情"></a>Windows 查看进程详情</h3><blockquote>
<p>原问题是 想看不同的 Python.exe 运行的是具体哪个脚本。<br>在任务管理器加一列。Command Line。</p>
</blockquote>
<hr>
<h3 id="zsh-配置文件"><a href="#zsh-配置文件" class="headerlink" title="zsh 配置文件"></a>zsh 配置文件</h3><blockquote>
<p>之前在 bash_profile 中修改了环境变量 但是 总是不生效 需要每次都 source 一下<br>因为 bash_profile 是 bash 的配置文件,修改了下 zsh 的配置文件,让 zsh 加载 bash的配置文件就好了<br>vim ~/.zshrc<br>加上:<br>source ~/.bash_profile<br>就可以了   </p>
</blockquote>
<hr>
<h3 id="mac-强制退出"><a href="#mac-强制退出" class="headerlink" title="mac 强制退出"></a>mac 强制退出</h3><blockquote>
<p>command + Option + Esc</p>
</blockquote>
<hr>
<h3 id="设置服务器免密登录"><a href="#设置服务器免密登录" class="headerlink" title="设置服务器免密登录"></a>设置服务器免密登录</h3><blockquote>
<p>ssh-copy-id -p [port] [username]@[host]<br>执行完此步之后会让你输入密码 输入后即可把自己的公钥上传到服务器 实现免密登录 </p>
</blockquote>
<hr>
<h3 id="查看端口号-列出进程-id"><a href="#查看端口号-列出进程-id" class="headerlink" title="查看端口号 列出进程 id"></a>查看端口号 列出进程 id</h3><blockquote>
<p>lsof -i:8000 </p>
</blockquote>
<h3 id="查询文件所在的位置"><a href="#查询文件所在的位置" class="headerlink" title="查询文件所在的位置"></a>查询文件所在的位置</h3><blockquote>
<p>find / -name filename</p>
</blockquote>
<hr>
<h3 id="git-撤销提交"><a href="#git-撤销提交" class="headerlink" title="git 撤销提交"></a>git 撤销提交</h3><blockquote>
<p>git reset HEAD^<br>git push origin dev -f </p>
</blockquote>
<hr>
<h3 id="mongodb-导入导出数据"><a href="#mongodb-导入导出数据" class="headerlink" title="mongodb 导入导出数据"></a>mongodb 导入导出数据</h3><blockquote>
<p>导入数据<br>mongorestore -h 127.0.0.1:27017 -d 数据库名字 文件地址</p>
<p>导出数据<br>mongodump -h IP -port 端口 -u 用户名 -p 密码 -d 数据库 -o 文件存在路径</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The first article]]></title>
      <url>/2017/11/16/article/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
